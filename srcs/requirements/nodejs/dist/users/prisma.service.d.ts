import { PrismaClient, User } from '@prisma/client';
export declare class PrismaService extends PrismaClient {
    createUser(password?: string, name?: string, email?: string, pseudo?: string): Promise<any>;
    create42User(password?: string, name?: string, email?: string, pseudo?: string, avatar?: string): Promise<any>;
    findUserByUsername(username: string): Promise<User | null>;
    findUserById(userId: number): Promise<User | null>;
    updateUser(id: number, data: Partial<User>): Promise<User>;
    updatePass(id: number, data: Partial<User>): Promise<User>;
    updateAv(id: number, data: Partial<User>): Promise<User>;
    update2FA(id: number, data: Partial<User>): Promise<User>;
    deleteAv(id: number): Promise<any>;
    addFriend(userId: number, friendId: number): Promise<void>;
    removeFriend(userId: number, friendId: number): Promise<void>;
    getFriends(userId: number): Promise<number[]>;
    updateInvMess(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateInvMessToFalse(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateInvitation(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateInvitationToFalse(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateOnLine(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateOffLine(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateInGame(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    updateOutGame(id: number): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    quickFix(user: User): User;
}
