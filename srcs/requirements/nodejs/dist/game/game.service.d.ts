import { PrismaService } from "../users/prisma.service";
import { Game } from "./entity/game.entity";
import { GameState, UserSocket } from "./entity/gamestate.entity";
import { Server } from "socket.io";
import { AuthMiddleware } from "./jwt-auth.guard";
import { Socket } from "socket.io";
import { JwtService } from "@nestjs/jwt";
export declare class GameService {
    private readonly prisma;
    private readonly jwt;
    private readonly authGuard;
    constructor(prisma: PrismaService, jwt: JwtService, authGuard: AuthMiddleware);
    private activeGames;
    private sanitizeGameState;
    createGame(gameEntry: Game): Promise<Game>;
    updateGameScore(game: Game, score1: number, score2: number): Promise<void>;
    updateGames(server: Server): void;
    connect(client: UserSocket): Promise<void>;
    getUserSocket(client: Socket): Promise<{
        id: number;
        name: string;
        password: string;
        email: string;
        pseudo: string;
        avatar: string;
        twoFactorAuth: boolean;
        twofvalidated: boolean;
        twofsecret: string;
        friends: number[];
        blocked: number[];
        onLine: boolean;
        inGame: boolean;
        haveInvitation: boolean;
        haveMessage: boolean;
        matchs: number;
        wins: number;
        lose: number;
    }>;
    disconnect(server: Server, client: UserSocket): Promise<void>;
    startGame(server: Server, user_id: number): Promise<void>;
    endGame(server: Server, game: GameState): Promise<void>;
    joinQueue(client: UserSocket, server: Server): boolean;
    privateStartGame(server: Server, p_room_name: string): Promise<void>;
    joinPrivateQueue(client: UserSocket, server: Server, body: any): Promise<boolean>;
    leaveQueue(client: UserSocket): boolean;
    abondonGame(server: Server, client: UserSocket): void;
    shiftDirection(client: UserSocket, isUp: boolean, press: boolean): void;
    getAllHistories(userId: number): Promise<any>;
    findOneGameById(gameId: number): Promise<Game | null>;
}
